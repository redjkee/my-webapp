document.addEventListener('DOMContentLoaded', function() {
    const btn1 = document.getElementById('btn1');
    const btn2 = document.getElementById('btn2');
    const result = document.getElementById('result');
    const refreshLogs = document.getElementById('refreshLogs');
    const logsPreview = document.getElementById('logsPreview');

    console.log('‚úÖ Script loaded - buttons found:', btn1, btn2);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    async function handleButtonClick(buttonNumber) {
        console.log(`üñ±Ô∏è Button ${buttonNumber} clicked`);
        
        try {
            result.innerHTML = '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...';
            
            const response = await fetch(`/api/button${buttonNumber}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ 
                    button: buttonNumber,
                    clientTime: new Date().toISOString()
                })
            });

            console.log('üì® Response status:', response.status);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            console.log('üìä Response data:', data);
            
            result.innerHTML = `
                <strong>‚úÖ –£—Å–ø–µ—Ö!</strong><br>
                üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${data.message}<br>
                ‚è∞ –í—Ä–µ–º—è: ${new Date(data.timestamp).toLocaleString()}<br>
                üÜî ID: ${data.requestId}<br>
                üìç –õ–æ–≥: ${data.serverLog}
            `;
            result.style.backgroundColor = '#d4edda';
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é –ª–æ–≥–æ–≤
            loadLogsPreview();
            
        } catch (error) {
            console.error('‚ùå Error:', error);
            result.innerHTML = `<strong>‚ùå –û—à–∏–±–∫–∞!</strong><br>${error.message}`;
            result.style.backgroundColor = '#f8d7da';
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–≤—å—é –ª–æ–≥–æ–≤
    async function loadLogsPreview() {
        try {
            const response = await fetch('/api/logs');
            const data = await response.json();
            
            logsPreview.innerHTML = `
                <strong>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã (${data.totalRequests}):</strong><br>
                ${data.logs.slice(0, 5).map(log => 
                    `<div class="log-item">
                        ${log.method} ${log.url}<br>
                        <small>${new Date(log.timestamp).toLocaleString()}</small>
                    </div>`
                ).join('')}
            `;
        } catch (error) {
            logsPreview.innerHTML = '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–∏';
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    if (btn1) {
        btn1.addEventListener('click', () => handleButtonClick(1));
        console.log('‚úÖ Button 1 handler attached');
    }
    if (btn2) {
        btn2.addEventListener('click', () => handleButtonClick(2));
        console.log('‚úÖ Button 2 handler attached');
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤
    if (refreshLogs) {
        refreshLogs.addEventListener('click', loadLogsPreview);
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–≤—å—é –ª–æ–≥–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    loadLogsPreview();
});
